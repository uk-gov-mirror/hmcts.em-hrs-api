plugins {
  id 'application'
  id 'checkstyle'
  id 'pmd'
  id 'jacoco'
  id 'io.spring.dependency-management' version '1.0.11.RELEASE'
  id 'org.springframework.boot' version '2.3.4.RELEASE'
  id 'uk.gov.hmcts.java' version '0.12.5'
  id 'com.github.ben-manes.versions' version '0.38.0'
  id 'org.sonarqube' version '3.1.1'
  id 'org.liquibase.gradle' version '2.0.4'
  id 'groovy'
}

apply from: 'liquibase.gradle'


allprojects {
  sourceCompatibility = '11'
  targetCompatibility = '11'
}

group = 'uk.gov.hmcts.reform.em.hrs'
version = '0.0.1'
mainClassName = 'uk.gov.hmcts.reform.em.hrs.Application'

/***********************************************************************************************************************
 * Source Sets
 **********************************************************************************************************************/

sourceSets {
  //functionalTest typically run on AAT environment only. Includes tests to real external endpoints.
  //if running locally, need the relevant docker containers to test against
  //if need to run any locally, then the specific test(s) should be specified
  functionalTest {
    //will pick up any tests with @WithTags({@WithTag("testType:Functional")})
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/functionalTest/java')
    }
    resources.srcDir file('src/functionalTest/resources')
  }


  //integrationTest typically tests with mocked external endpoints (so can run locally without dependencies)
  integrationTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/integrationTest/java')
    }
    resources.srcDir file('src/integrationTest/resources')
  }

  //smokeTest should include helloworld & healthcheck. Ideally will also include downstream healthchecks
  //should work locally, in AAT and production
  smokeTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/smokeTest/java')
    }
    groovy {
      compileClasspath += main.output + test.output
      runtimeClasspath += main.output + test.output
      srcDir('src/smokeTest/groovy')
    }

    resources.srcDir file('src/smokeTest/resources')
  }
}

/***********************************************************************************************************************
 * Build Tasks
 **********************************************************************************************************************/

tasks.withType(JavaCompile) {
  options.compilerArgs << "-Xlint:unchecked" << "-Werror"
}

tasks.withType(Test) {
  useJUnitPlatform()

  testLogging {
    exceptionFormat = 'full'
  }
}

task functional(type: Test) {
  description = "Runs functional tests"
  group = "Verification"
  testClassesDirs = sourceSets.functionalTest.output.classesDirs
  classpath = sourceSets.functionalTest.runtimeClasspath
}

task integration(type: Test) {
  description = "Runs integration tests"
  group = "Verification"
  testClassesDirs = sourceSets.integrationTest.output.classesDirs
  classpath = sourceSets.integrationTest.runtimeClasspath
  failFast = true
}

task smoke(type: Test) {
  group = 'Delivery pipeline'
  description = "Runs Smoke Tests"
  testClassesDirs = sourceSets.smokeTest.output.classesDirs
  classpath = sourceSets.smokeTest.runtimeClasspath

}

/***********************************************************************************************************************
 * Code Checks
 **********************************************************************************************************************/

checkstyle {
  maxWarnings = 10
  toolVersion = '8.29'
  getConfigDirectory().set(new File(rootDir, 'config/checkstyle'))
}

pmd {
  toolVersion = "6.30.0"
  ignoreFailures = true
  sourceSets = [sourceSets.main, sourceSets.test, sourceSets.functionalTest, sourceSets.integrationTest, sourceSets.smokeTest]
  reportsDir = file("$project.buildDir/reports/pmd")
  // https://github.com/pmd/pmd/issues/876
  ruleSets = []
  ruleSetFiles = files("config/pmd/ruleset.xml")
}

jacocoTestReport {
  executionData(test)
  reports {
    xml.enabled = true
    csv.enabled = false
    xml.destination file("${project.buildDir}/reports/jacoco/test/jacocoTestReport.xml")
  }
}

def coverageExclusionList = [
  '**uk/gov/hmcts/reform/em/hrs/Application*',
  '**uk/gov/hmcts/reform/em/hrs/config/**',
  '**uk/gov/hmcts/reform/em/hrs/domain/**',
  '**uk/gov/hmcts/reform/em/hrs/exception/**',
  '**uk/gov/hmcts/reform/em/hrs/repository/**',
  '**uk/gov/hmcts/reform/em/hrs/service/**',
]

jacocoTestReport {
  afterEvaluate {
    classDirectories.setFrom(files(classDirectories.files.collect {
      fileTree(dir: it, exclude: coverageExclusionList)
    }))
  }
}

project.tasks['sonarqube'].dependsOn test, integration, jacocoTestReport

sonarqube {
  properties {
    property "sonar.projectName", "Reform :: em-hrs-api"
    property "sonar.projectKey", "uk.gov.hmcts.reform.em.hrs:em-hrs-api"
    property "sonar.exclusions", coverageExclusionList.join(", ")
    property "sonar.coverage.jacoco.xmlReportPaths", "${project.buildDir}/reports/jacoco/test/jacocoTestReport.xml"
  }
}

/***********************************************************************************************************************
 * Dependency Management
 **********************************************************************************************************************/
configurations.all {
  resolutionStrategy {
    eachDependency { DependencyResolveDetails details ->
      if (details.requested.group in ['org.apache.tomcat.embed']) {
        details.useVersion '9.0.43'
      }
    }
  }
}

// before committing a change, make sure task still works
dependencyUpdates {
  def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { qualifier -> version.toUpperCase().contains(qualifier) }
    def regex = /^[0-9,.v-]+$/
    return !stableKeyword && !(version ==~ regex)
  }
  rejectVersionIf { selection -> // <---- notice how the closure argument is named
    return isNonStable(selection.candidate.version) && !isNonStable(selection.currentVersion)
  }
}

// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
  suppressionFile = 'config/owasp/suppressions.xml'
}

dependencyManagement {
  dependencies {
    dependencySet(group: 'com.google.guava', version: '30.1-jre') {
      // Guava CVE-2018-10237 - Unbounded memory allocation
      entry 'guava'
    }

    dependencySet(group: 'org.jetbrains.kotlin', version: '1.4.30') {
      entry 'kotlin'
      entry 'kotlin-stdlib'
      entry 'kotlin-reflect'
      entry 'kotlin-stdlib-common'
      entry 'kotlin-stdlib-jdk7'
      entry 'kotlin-stdlib-jdk8'
    }

    //CVE-2021-21290
    dependencySet(group: 'io.netty', version: '4.1.59.Final') {
      entry 'netty-buffer'
      entry 'netty-codec'
      entry 'netty-common'
      entry 'netty-handler'
      entry 'netty-resolver'
      entry 'netty-transport'
      entry 'netty-codec-http'
      entry 'netty-codec-http2'
      entry 'netty-transport-native-epoll'
      entry 'netty-transport-native-kqueue'
      entry 'netty-transport-native-unix-common'
      entry 'netty-codec-socks'
      entry 'netty-handler-proxy'
    }

    //CVE-2021-22112
    dependencySet(group: 'org.springframework.security', version: '5.3.8.RELEASE') {
      entry 'spring-security-config'
      entry 'spring-security-core'
      entry 'spring-security-crypto'
      entry 'spring-security-oauth2-client'
      entry 'spring-security-oauth2-core'
      entry 'spring-security-oauth2-jose'
      entry 'spring-security-oauth2-resource-server'
      entry 'spring-security-web'
    }
    
  }
}

repositories {
  maven { url "https://dl.bintray.com/hmcts/hmcts-maven" } //TODO confirm this should be the primary maven repo (it is in dm store and em stictching)
  mavenLocal()
  jcenter()
  mavenCentral()
}

def versions = [
  lombok          : '1.18.10',
  reformLogging   : '5.1.5',
  springBoot      : springBoot.class.package.implementationVersion,
  springfoxSwagger: '2.9.2',

  postgresql: '42.2.13',

  serenity           : '2.3.12',
  serenityRestAssured : '2.3.4',
  serenityreporter   : '2.3.12',
  junit           : '5.7.0',
  junitPlatform   : '1.7.1',
]

ext.libraries = [
  junit5: [
    "org.junit.jupiter:junit-jupiter-api:${versions.junit}",
    "org.junit.jupiter:junit-jupiter-engine:${versions.junit}",
    "org.junit.jupiter:junit-jupiter-params:${versions.junit}",
    "org.junit.platform:junit-platform-commons:${versions.junitPlatform}",
    "org.junit.platform:junit-platform-engine:${versions.junitPlatform}"
  ]
]

dependencies {

  def withoutStuff = {
    exclude group: 'com.sun.xml.bind', module: 'jaxb-osgi'
    exclude group: 'com.vaadin.external.google', module: 'android-json'
    exclude group: 'org.springframework.boot', module: 'spring-boot-starter-security'
    exclude group: 'org.springframework.boot', module: 'spring-boot-starter-test'
    exclude group: 'uk.gov.hmcts.reform', module: 'java-logging-spring'
  }

  compile group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.13'
  compile group: 'org.apache.httpcomponents', name: 'fluent-hc', version: '4.5.13'

  annotationProcessor group: 'org.projectlombok', name: 'lombok', version: versions.lombok

// TODO springboot starter (deprecated) this excludes the following jars, but the spring boot template does not
//  implementation ("uk.gov.hmcts.reform:properties-volume-spring-boot-starter:0.1.0"){
//    exclude group: 'org.springframework.cloud' , module : 'spring-cloud-context'
//    exclude group: 'org.springframework.boot' , module: 'spring-boot-starter-web'
//  }

  implementation "org.springframework.boot:spring-boot-starter-actuator"
  implementation "org.springframework.boot:spring-boot-starter-aop"
  implementation "org.springframework.boot:spring-boot-starter-json"
  implementation "org.springframework.boot:spring-boot-starter-validation"
  implementation "org.springframework.boot:spring-boot-starter-web"
  implementation "org.springframework.boot:spring-boot-starter-security"

  implementation "uk.gov.hmcts.reform:properties-volume-spring-boot-starter:0.1.0" //injects secret properties into container from azure vault TODO deprecated in favour of spring config tree

//hmcts autho

  implementation group: 'uk.gov.hmcts.reform', name: 'service-auth-provider-client', version: '3.1.4'
  implementation (group: 'uk.gov.hmcts.reform.auth', name: 'auth-checker-lib', version: '2.1.4') {
    exclude group: 'uk.gov.hmcts.reform', module: 'java-logging-spring'
  }

//hmcts logging
  implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.14.0'
  implementation group: 'org.apache.logging.log4j', name: 'log4j-to-slf4j', version: '2.14.0'
  implementation group: 'uk.gov.hmcts.reform', name: 'logging', version: versions.reformLogging
  implementation group: 'uk.gov.hmcts.reform', name: 'logging-appinsights', version: versions.reformLogging

//hmcts resilience
  implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-netflix-hystrix', version: '2.2.7.RELEASE'

//gov notify email service
  implementation group: 'uk.gov.service.notify', name: 'notifications-java-client', version: '3.17.0-RELEASE'

//rest clients
  implementation "com.squareup.okhttp3:okhttp:4.9.1"
  implementation "com.squareup.okhttp3:logging-interceptor:4.9.1"

//rest server / API publishing?
  implementation group: 'io.springfox', name: 'springfox-swagger2', version: versions.springfoxSwagger

//azure components
  implementation group: 'com.azure', name: 'azure-storage-blob', version: '12.10.0'

/***********************************************************************************************************************
 * DATABASE DEPENDENCIES AND SOURCE SETS
 **********************************************************************************************************************/

  implementation group: 'org.postgresql', name: 'postgresql', version: versions.postgresql
  implementation group: 'org.hibernate', name: 'hibernate-core', version: '5.4.29.Final'
  implementation "org.liquibase:liquibase-core"
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa'
  implementation "org.springframework.boot:spring-boot-starter-jdbc"

  liquibaseRuntime "com.h2database:h2"
  liquibaseRuntime "org.liquibase.ext:liquibase-hibernate5:4.2.2"
  liquibaseRuntime "org.liquibase:liquibase-core:4.3.1"
  liquibaseRuntime "org.liquibase:liquibase-groovy-dsl:3.0.0"
  liquibaseRuntime group: 'org.postgresql', name: 'postgresql', version: versions.postgresql

  liquibaseRuntime sourceSets.main.compileClasspath
  liquibaseRuntime sourceSets.main.output

/***********************************************************************************************************************
 * TEST DEPENDENCIES
 **********************************************************************************************************************/

  testImplementation "org.springframework.boot:spring-boot-starter-test", withoutStuff
  testImplementation 'com.github.gmazzo:okhttp-mock:1.3.2'
  testImplementation libraries.junit5

  testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test', {
    exclude group: 'junit', module: 'junit'
    exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
  }

  smokeTestImplementation group: 'net.serenity-bdd', name: 'serenity-core', version: versions.serenity, withoutStuff
  smokeTestImplementation group: 'net.serenity-bdd', name: 'serenity-junit', version: versions.serenity
  smokeTestImplementation group: 'net.serenity-bdd', name: 'serenity-rest-assured', version: versions.serenityRestAssured, withoutStuff
  smokeTestImplementation group: 'net.serenity-bdd', name: 'serenity-single-page-report', version: versions.serenityreporter
  smokeTestImplementation group: 'net.serenity-bdd', name: 'serenity-spring', version: versions.serenity

/***********************************************************************************************************************
 * TEST SOURCE SETS
 **********************************************************************************************************************/

  functionalTestImplementation sourceSets.main.runtimeClasspath

  integrationTestImplementation sourceSets.main.runtimeClasspath
  integrationTestImplementation sourceSets.test.runtimeClasspath

  smokeTestImplementation sourceSets.main.runtimeClasspath
  smokeTestImplementation sourceSets.test.runtimeClasspath
}

/***********************************************************************************************************************
 * Adhoc
 **********************************************************************************************************************/

test {
  failFast = true

}

bootJar {
  getArchiveFileName().set(provider {
    'em-hrs-api.jar'
  })

  manifest {
    attributes('Implementation-Version': project.version.toString())
  }
}

wrapper {
    distributionType = Wrapper.DistributionType.ALL
}
